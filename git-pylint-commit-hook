#!/usr/bin/env python

"""
Git pre-commit hook for checking Python code quality. The hook requires pylint
to check the code quality.

AUTHOR:
    Sebastian Dahlgren <sebastian.dahlgren@gmail.com>

LICENSE:
    Apache License 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html
"""

import argparse
import sys

from git_pylint_commit_hook import commit_hook

VERSION = '2.2.1'


def main():
    """ Main function handling configuration files etc """
    parser = argparse.ArgumentParser(
        description='Git pylint commit hook')
    parser.add_argument(
        '--limit',
        default=8.0,
        type=float,
        help=(
            'Score limit, files with a lower score will stop the '
            'commit. Default: 8.0'))
    parser.add_argument(
        '--pylint',
        default='pylint',
        help='Path to pylint executable. Default: pylint')
    parser.add_argument(
        '--pylintrc',
        help=(
            'Path to pylintrc file. Options in the pylintrc will '
            'override the command line parameters. Default: pylint'
            'search order'))
    parser.add_argument(
        '--pylint-params',
        default='',
        help='Custom pylint parameters to add to the pylint command')
    parser.add_argument(
        '--suppress-report',
        action='store_true',
        help='Suppress report output if pylint fails')
    parser.add_argument(
        '--always-show-violations',
        action='store_true',
        help='Show violations in case of pass as well')
    parser.add_argument(
        '--version',
        action='store_true',
        help='Print current version number')
    parser.add_argument(
        '--ignore',
        dest='ignored_files', action='append',
        default=[],
        help=(
            'Add regex to blacklist files or directories, '
            'allowing to avoid running pylint those files.'))
    args = parser.parse_args()

    if args.version:
        print('git-pylint-commit-hook version {}'.format(VERSION))
        sys.exit(0)

    return commit_hook.check_repo(
        args.limit,
        args.pylint,
        args.pylintrc,
        args.pylint_params,
        args.suppress_report,
        args.always_show_violations,
        args.ignored_files)

if __name__ == '__main__':
    result = main()

    if not result:
        print("\033[1;31;40m COMMIT REJECTED \033[0m")
        sys.exit(1)

    print("\033[1;32;40m COMMIT SUCCESSFUL \033[0m")
    sys.exit(0)

print("\033[1;31;40m COMMIT REJECTED \033[0m")
sys.exit(1)
